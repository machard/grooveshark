// Generated by CoffeeScript 1.4.0
(function() {
  var BASE_URL, Client, crypto, request;

  request = require('request');

  crypto = require('crypto');

  BASE_URL = "https://api.grooveshark.com/ws3.php";

  Client = (function() {

    function Client(key, secret) {
      this.key = key;
      this.secret = secret;
      this.sessionID = null;
      this.authenticated = false;
    }

    Client.prototype.ensureSessionStarted = function(options, cb) {
      var _this = this;
      if (this.sessionID) {
        return cb(null);
      } else {
        return this.request('startSession', {}, options, function(err, status, body) {
          if (err) {
            return cb(err);
          }
          _this.sessionID = body.sessionID;
          return cb(null);
        });
      }
    };

    Client.prototype.generateRequestBody = function(method, parameters, options, cb) {
      var _this = this;
      var needingSessionIDMethods = ['authenticate', 'logout', 'getStreamKeyStreamServer'] // to be completed
      if (needingSessionIDMethods.indexOf(method)>-1) {
        return this.ensureSessionStarted(options, function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null, {
            method: method,
            parameters: parameters,
            header: {
              wsKey: _this.key,
              sessionID: _this.sessionID
            }
          });
        });
      } else {
        return cb(null, {
          method: method,
          parameters: parameters,
          header: {
            wsKey: this.key
          }
        });
      }
    };

    Client.prototype.urlWithSig = function(body) {
      var sig;
      sig = crypto.createHmac('md5', this.secret).update(JSON.stringify(body), 'utf-8').digest('hex');
      return "" + BASE_URL + "?sig=" + sig;
    };

    Client.prototype.request = function(method, parameters, options, cb) {
      var _this = this;
      if (parameters == null) {
        parameters = {};
      }
      return this.generateRequestBody(method, parameters, options, function(err, body) {
        if (err) {
          return cb(err);
        }
        return request({
          uri: _this.urlWithSig(body),
          method: 'POST',
          json: body,
          jar: false,
          headers : {
              'X-Client-IP' : options.client_ip || null, 
          }
        }, function(err, res, body) {
          if (err) {
            return cb(err);
          }
          if (/^2..$/.test(res.statusCode)) {
            if (body.errors && body.errors.length) {
              return cb(body.errors, res.statusCode, body.result);
            } else {
              return cb(null, res.statusCode, body.result);
            }
          } else {
            return cb(null, res.statusCode, body);
          }
        });
      });
    };

    Client.prototype.authenticate = function(username, password, options, cb) {
      var token,
        _this = this;
      token = crypto.createHash('md5').update(password).digest("hex");
      return this.request('authenticate', {
        login: username,
        password: token
      }, options, function(err, status, body) {
        if (err) {
          return cb(err);
        }
        if (!(body != null ? body.success : void 0) || !(body != null ? body.UserID : void 0)) {
          return cb(new Error("Invalid username or password"));
        }
        _this.authenticated = true;
        return cb(null);
      });
    };

    Client.prototype.logout = function(options, cb) {
      var _this = this;
      return this.request('logout', {}, options, function(err, status, body) {
        if (err) {
          return cb(err);
        }
        _this.sessionID = null;
        _this.authenticated = false;
        return cb();
      });
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
